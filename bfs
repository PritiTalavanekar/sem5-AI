from collections import deque
def bfs(graph,start):
    visited=set()
    queue=deque([start])
    while queue:
        vertex=queue.popleft()
        if vertex not in visited:
            visited.add(vertex)
            print(vertex)
            neighbors=graph[vertex]
            for neighbor in neighbors:
                if neighbor not in visited:
                    queue.append(neighbor)
graph = {
    'A' : ['B','C'],
    'B' : ['A','D','E'],
    'C' : ['A','F'],
    'D' : ['B','G'],
    'E' : ['B','H'],
    'F' : ['C'],
    'G' : ['D'],
    'H' : ['E']
    }
start='A'
print("breadth first search :")
bfs(graph,start)
















from queue import PriorityQueue

def bfs(graph, start, goal):
    visited = set()
    pq = PriorityQueue()
    pq.put((0, start, [start])) 

    while not pq.empty():
        cost, city, path = pq.get()

        if city == goal:
            print("Shortest Path:", " -> ".join(path))
            print("Total Cost:", cost)
            return

        if city not in visited:
            visited.add(city)
            for neighbor, travel_cost in graph[city]:
                if neighbor not in visited:
                    pq.put((cost + travel_cost, neighbor, path + [neighbor]))

    print("No path found from", start, "to", goal)


graph = {
    'Mumbai': [('Pune', 120), ('Surat', 280)],
    'Pune': [('Mumbai', 120), ('Nashik', 210), ('Nagpur', 700)],
    'Surat': [('Mumbai', 280), ('Nashik', 400)],
    'Nashik': [('Pune', 210), ('Surat', 400), ('Nagpur', 600)],
    'Nagpur': [('Pune', 700), ('Nashik', 600)]
}

start_city = 'Mumbai'
goal_city = 'Nagpur'

print("Uniform Cost Search (Shortest Path Based on Travel Cost):")
bfs(graph, start_city, goal_city)

